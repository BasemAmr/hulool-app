          </button>
        </div>
      </div>
    );
      </div>
    );
  };

  return (
    <div
      className="card h-100 shadow-sm dashboard-client-card"
      style={{
        borderRadius: '0px', // No border radius
        border: `3px solid ${borderColor}`, // Increased border width
        overflow: 'hidden',
        position: 'relative',
        transition: 'all 0.3s ease-in-out',
        transform: 'scale(1)',
      }}
      onMouseEnter={(e) => {
        e.currentTarget.style.transform = 'scale(1.02)';
        e.currentTarget.style.zIndex = '10';
        e.currentTarget.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
      }}
      onMouseLeave={(e) => {
        e.currentTarget.style.transform = 'scale(1)';
        e.currentTarget.style.zIndex = '1';
        e.currentTarget.style.boxShadow = '';
      }}
    >
      {/* Header with alternating strong colors */}
      <div
        className="card-header border-0 py-2"
        style={{
          backgroundColor: headerColor,
          borderRadius: 0
        }}
      >
        <div className="d-flex justify-content-between align-items-center">
          {/* Left: WhatsApp with phone number */}
          <div className="d-flex align-items-center gap-2">
            <button
              onClick={openWhatsApp}
              className="btn btn-sm btn-outline-light p-1 border-0"
              title="ÙˆØ§ØªØ³Ø§Ø¨"
            >
              <img src={WhatsAppIcon} alt="WhatsApp" width="16" height="16" />
            </button>
            <span style={{ fontSize: '0.85em' }}>
              {client.phone || ''}
            </span>
          </div>

          {/* Center: Client name with Google Drive */}
          <div className="d-flex align-items-center justify-content-center gap-2">
            <Link
              to={`/clients/${client.id}`}
              className="text-decoration-none fw-bold text-black"
              style={{ fontSize: '0.95em' }}
            >
              {client.name}
            </Link>
            {isClientUrgent && (
              <AlertTriangle size={12} className="text-warning" />
            )}
            <button
              onClick={openGoogleDrive}
              className="btn btn-sm btn-outline-light p-1 text-black border-0"
              title="Google Drive"
              disabled={!client.google_drive_link}
            >
              <img src={GoogleDriveIcon} alt="Google Drive" width="16" height="16" />
            </button>
          </div>

          {/* Right: Actions Dropdown */}
          <HeaderDropdownSection
            handleAddTask={handleAddTask}
            handleAddReceivable={handleAddReceivable}
            handleRecordCredit={handleRecordCredit}
          />
        </div>
      </div>

      {/* Body - Tasks Table */}
      <div
        className="card-body p-0"
        style={{
          position: 'relative',
          backgroundColor: row1Color,
          overflow: 'hidden'
        }}
      >
        <div className="table-responsive" style={{
          overflow: 'hidden'
        }}>
          <div style={{
            // ADJUSTED: Allow natural height growth within the flex container
            // maxHeight: '300px', // Removed fixed max-height
            overflow: 'hidden',
            position: 'relative'
          }}>
            <table className="table table-sm mb-0">
              {/* Sticky table header */}
              <thead
                style={{
                  position: 'sticky',
                  top: 0,
                  zIndex: 1,
                  border: 'none'
                }}
              >
                <tr>
                  <th style={{
                    fontSize: '0.8em',
                    padding: '6px 8px',
                    backgroundColor: headerColor,
                    border: 'none'
                  }}>Ø§Ù„Ù…Ù‡Ù…Ø©</th>
                  <th style={{
                    fontSize: '0.8em',
                    padding: '6px 8px',
                    backgroundColor: headerColor,
                    border: 'none'
                  }}>ØªØ§Ø±ÙŠØ®</th>
                  <th style={{
                    fontSize: '0.8em',
                    padding: '6px 8px',
                    backgroundColor: headerColor,
                    border: 'none'
                  }}>Ø§Ù„ÙŠÙˆÙ…</th>
                  <th style={{
                    fontSize: '0.8em',
                    padding: '6px 8px',
                    backgroundColor: headerColor,
                    border: 'none'
                  }}>Ø§Ù„Ù…Ø¨Ù„Øº</th>
                  <th style={{
                    fontSize: '0.8em',
                    padding: '6px 8px',
                    width: '80px',
                    minWidth: '80px',
                    backgroundColor: headerColor,
                    border: 'none'
                  }}>Ø¥Ø¬Ø±Ø§Ø¡Ø§Øª</th>
                </tr>
              </thead>
              <tbody>
                {tasks.map((task, taskIndex) => {
                  const isTaskUrgent = task.tags?.some(tag => tag.name === 'Ù‚ØµÙˆÙ‰');

                  // Row background logic
                  let rowBackground;
                  // Check if task is assigned to an employee
                  const isEmployeeTask = task.assigned_to_id && isUserEmployee(task.assigned_to_id);

                  if (isTaskUrgent) {
                    rowBackground = '#ffcccc'; // Red for urgent tasks
                  } else {
                    rowBackground = taskIndex % 2 === 0 ? row1Color : row2Color;
                  }

                  return (
                    <tr
                      key={task.id}
                      className="task-row"
                      data-task-id={task.id}
                      style={{
                        backgroundColor: rowBackground,
                        transition: 'all 0.2s ease-in-out',
                        border: 'none',
                        borderRight: isEmployeeTask ? '6px solid #007bff !important' : 'none',
                        position: 'relative'
                      }}
                    >
                      <td style={{
                        fontSize: '0.82em',
                        padding: '8px',
                        color: 'black',
                        backgroundColor: rowBackground,
                        border: 'none'
                      }}>
                        <div className="d-flex align-items-center gap-1">
                          <span className="text-truncate" style={{ maxWidth: 180, display: 'inline-block' }}>
                            {task.task_name || t(`type.${task.type}`)}
                          </span>
                          {task.tags?.some(tag => tag.name === 'Ù‚ØµÙˆÙ‰') && (
                            <AlertTriangle size={10} className="text-danger" />
                          )}
                        </div>
                      </td>
                      <td style={{
                        fontSize: '0.77em',
                        padding: '8px',
                        color: 'black',
                        backgroundColor: rowBackground,
                        border: 'none'
                      }}>
                        {formatDate(task.start_date).replace(/\/20/, '/')}
                      </td>
                      <td style={{
                        fontSize: '0.77em',
                        padding: '8px',
                        color: 'black',
                        backgroundColor: rowBackground,
                        border: 'none'
                      }}>
                        {formatDaysElapsed(task.start_date)}
                      </td>
                      <td style={{
                        fontSize: '0.77em',
                        padding: '8px',
                        color: 'black',
                        backgroundColor: rowBackground,
                        border: 'none'
                      }} className="text-success fw-bold">
                        <div className="d-flex align-items-center text-danger">
                          <svg
                            width={10}
                            height={10}
                            viewBox="0 0 1124.14 1256.39"
                            style={{
                              marginLeft: '2px',
                              verticalAlign: 'middle'
                            }}
                          >
                            <path
                              d="M699.62,1113.02h0c-20.06,44.48-33.32,92.75-38.4,143.37l424.51-90.24c20.06-44.47,33.31-92.75,38.4-143.37l-424.51,90.24Z"
                              fill="#f00"
                            />
                            <path
                              d="M1085.73,895.8c20.06-44.47,33.32-92.75,38.4-143.37l-330.68,70.33v-135.2l292.27-62.11c20.06-44.47,33.32-92.75,38.4-143.37l-330.68,70.27V66.13c-50.67,28.45-95.67,66.32-132.25,110.99v403.35l-132.25,28.11V0c-50.67,28.44-95.67,66.32-132.25,110.99v525.69l-295.91,62.88c-20.06,44.47-33.33,92.75-38.42,143.37l334.33-71.05v170.26l-358.3,76.14c-20.06,44.47-33.32,92.75-38.4,143.37l375.04-79.7c30.53-6.35,56.77-24.4,73.83-49.24l68.78-101.97v-.02c7.14-10.55,11.3-23.27,11.3-36.97v-149.98l132.25-28.11v270.4l424.53-90.28Z"
                              fill="#f00"
                            />
                          </svg>
                          {task.amount?.toLocaleString()}
                        </div>
                      </td>
                      <td 
                        className="task-actions"
                        style={{
                          padding: '8px',
                          position: 'relative',
                          color: 'black',
                          backgroundColor: rowBackground,
                          border: 'none',
                          minWidth: '80px',
                          whiteSpace: 'nowrap'
                        }}>
                        <div className="d-flex gap-1" style={{ 
                          justifyContent: 'flex-start',
                          minWidth: 'fit-content'
                        }}>
                          <button
                            className="btn btn-outline-secondary btn-sm p-1 me-1"
                            onClick={() => openDrawer('taskFollowUp', { 
                              taskId: task.id,
                              taskName: task.task_name || undefined,
                              clientName: client.name
                            })}
                            title="Ø§Ù„ØªØ¹Ù„ÙŠÙ‚Ø§Øª"
                            style={{ fontSize: '10px', lineHeight: 1 }}
                          >
                            <MessageSquare size={10} />
                          </button>

                          <button
                            onClick={() => handleEditTask(task)}
                            className="btn btn-outline-info btn-sm p-1"
                            title="ØªÙØ§ØµÙŠÙ„"
                            style={{ fontSize: '10px', lineHeight: 1 }}
                          >
                            <Eye size={10} />
                          </button>

                          <Dropdown>
                            <Dropdown.Toggle
                              variant="outline-secondary"
                              size="sm"
                              className="p-1"
                              style={{ fontSize: '10px' }}
                            >
                              <MoreVertical size={10} />
                            </Dropdown.Toggle>
                            {createPortal(
                              <Dropdown.Menu
                                align={"end"}
                                className="text-end"
                                style={{
                                  position: 'absolute',
                                  zIndex: 1050,
                                  minWidth: '120px',
                                  fontSize: '0.85em',
                                  top: 'auto',
                                  left: 'auto',
                                  transform: 'none'
                                }}
                              >
                                {shouldShowCompleteButton(task) && (
                                  <Dropdown.Item onClick={() => handleComplete(task)} className="text-end">
                                    <Check size={11} className="ms-2" />
                                    Ø¥ÙƒÙ…Ø§Ù„
                                  </Dropdown.Item>
                                )}
                                {task.status === 'New' ? (
                                  <Dropdown.Item onClick={() => handleDefer(task)} className="text-end">
                                    <Pause size={11} className="ms-2" />
                                    ØªØ£Ø¬ÙŠÙ„
                                  </Dropdown.Item>
                                ) : (
                                  <Dropdown.Item onClick={() => handleResume(task)} className="text-end">
                                    <Play size={11} className="ms-2" />
                                    Ø§Ø³ØªØ¦Ù†Ø§Ù
                                  </Dropdown.Item>
                                )}
                                <Dropdown.Item onClick={() => handleShowRequirements(task)} className="text-end">
                                  <ListChecks size={11} className="ms-2" />
                                  Ø§Ù„Ù…ØªØ·Ù„Ø¨Ø§Øª
                                </Dropdown.Item>
                                {/* Assign Task - Only for New or Deferred tasks */}
                                {onAssign && (task.status === 'New' || task.status === 'Deferred') && (
                                  <Dropdown.Item onClick={() => onAssign(task)} className="text-end">
                                    <UserPlus size={11} className="ms-2" />
                                    ØªØ¹ÙŠÙŠÙ† Ù…ÙˆØ¸Ù
                                  </Dropdown.Item>
                                )}
                                <Dropdown.Item 
                                  onClick={() => openDrawer('taskFollowUp', { 
                                    taskId: task.id,
                                    taskName: task.task_name || undefined,
                                    clientName: client.name
                                  })} 
                                  className="text-end"
                                >
                                  <MessageSquare size={11} className="ms-2" />
                                  Ø§Ù„ØªØ¹Ù„ÙŠÙ‚Ø§Øª
                                </Dropdown.Item>
                                <Dropdown.Item onClick={() => handleToggleUrgentTag(task)} className="text-end">
                                  <AlertTriangle size={11} className="ms-2" />
                                  {task.tags?.some(tag => tag.name === 'Ù‚ØµÙˆÙ‰') ? 'Ø¥Ù„ØºØ§Ø¡ Ø§Ù„Ø¹Ø§Ø¬Ù„' : 'ØªØ¹Ù„ÙŠÙ… Ø¹Ø§Ø¬Ù„'}
                                </Dropdown.Item>
                              </Dropdown.Menu>,
                              document.body
                            )}
                          </Dropdown>
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardClientCard;
